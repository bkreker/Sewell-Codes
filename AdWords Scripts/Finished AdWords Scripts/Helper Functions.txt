
//Helper function to format todays date and time
function _getDateTime() {
  var today = new Date();
  var timeZone = AdWordsApp.currentAccount().getTimeZone();  
  var dayFormat = "MM-dd-yyyy";  
  var day = Utilities.formatDate(today, timeZone , dayFormat);
  var time = AM_PM(today);
  
  var date = {
    day: day,
    time: time
  };
  
  return date;  
} 

// Helper function to get the time in am/pm
function AM_PM(date) {
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var ampm = hours >= 12 ? 'pm' : 'am';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0' + minutes : minutes;
    var strTime = hours + ':' + minutes + ' ' + ampm;
    return strTime;
}

// Helper function to get custom date range, defaults to one quarter (13 weeks) ago is 91 days and 'YYYYMMdd' date format
function CustomDateRange(days, format){
	if (days === null || days === undefined){
		days = 91;
	}
  if(format === undefined || format === '' || format === null){	
	format = 'YYYYMMdd';
  }
  var fromS = _daysAgo(days, format).toString();
  var toS = _today(format).toString();
  var to = _today();
  var from = _daysAgo(days);
  var result = {
    fromStr: fromS,
    toStr: toS,
	fromObj: from,
	toObj: to,
    string: function(){	
      return fromS + ',' + toS;
    } 
  }
  return result;
}

// Helper function to get a date a certain number of days ago (one quarter (13 weeks) ago is 91 days)
function _daysAgo(num, format){  	
  var newDate = new Date();
  newDate.setDate(newDate.getDate() - num);
  var day;
  if(format != undefined && format != '' && format != null){	
	var timeZone = AdWordsApp.currentAccount().getTimeZone();  
	day = Utilities.formatDate(newDate, timeZone , format);
  }
  else
  {
    day = {
      day: newDate.getDate(),
      month: newDate.getMonth(),
      year: newDate.getYear()
    };
  }
  return day;
}

//Helper function to format todays date
function _today(format) {
  var newDate = new Date();
  var timeZone = AdWordsApp.currentAccount().getTimeZone();  
  var day;  
  if(format != undefined && format != '' && format != null)
    {	
	 day = Utilities.formatDate(newDate, timeZone , format);
  }
  else
  {
    day = {
      day: newDate.getDate(),
      month: newDate.getMonth(),
      year: newDate.getYear()
    };
  }
  return day;
}
 
function _getDateString(){
	var today = new Date();
  var timeZone = AdWordsApp.currentAccount().getTimeZone();  
  var dayFormat= "MM-dd-yyyy";
  var day = Utilities.formatDate(today, timeZone , dayFormat);
 
  return day;  
}
// Function to get date and return true if it's monday
// Days: 0: sun, 1: mon, 2: tue, 3: wed, 4: thu, 5: fri, 6: sat
function todayIsMonday() {
    var DATE_OFFSET = 3600000;
    var date = new Date();
    var today = new Date(date.getTime() + DATE_OFFSET);
    var time = today.getTime();
    var day = today.getDay();
    Logger.log('today: ' + today + '\nday: ' + day);
	return (day === 1);
}


function Rolling13Week(){
  var format ='MM/dd/YYYY';
  var p = _daysAgo(98, format) + ' - ' + _daysAgo(7, format);
  var n = _daysAgo(91, format) + ' - ' + _today(format)
  var result = {
    from: p,
    to: n,
    string: function(){
      return this.p + ' - ' + this.n;
    } 
  }
  return result;
}

function Rolling13Week(format){
  var p = _daysAgo(98, format) + ' - ' + _daysAgo(7, format);
  var n = _daysAgo(91, format) + ' - ' + _today(format)
  var result = {
    from: p,
    to: n,
    string: function(){
      return this.p + ' - ' + this.n;
    } 
  }
  return result;
}

function formatKeyword(keyword) {
    keyword = keyword.replace(/[^a-zA-Z0-9 ]/g, '');
    return keyword;
}

// A helper function to make rounding a little easier
function round(value) {
    var decimals = Math.pow(10, DECIMAL_PLACES);
    return Math.round(value * decimals) / decimals;
}

//This function returns the standard deviation for a set of entities
//The stat key determines which stat to calculate it for
function getStandardDev(entites,mean,stat_key) {
  var total = 0;
  for(var i in entites) {
    total += Math.pow(entites[i]['stats'][stat_key] - mean,2);
  }
  if(Math.sqrt(entites.length-1) == 0) {
    return 0;
  }
  return round(Math.sqrt(total)/Math.sqrt(entites.length-1));
}

//Returns the mean (average) for the set of entities
//Again, stat key determines which stat to calculate this for
function getMean(entites,stat_key) {
  var total = 0;
  for(var i in entites) {
    total += entites[i]['stats'][stat_key];
  }
  if(entites.length == 0) {
    return 0;
  }
  return round(total/entites.length);
}

//This is a helper function to create the label if it does not already exist
function createLabelIfNeeded(name) {
    if (!AdWordsApp.labels().withCondition("Name = '" + name + "'").get().hasNext()) {
        AdWordsApp.createLabel(name);
    }
}

//Takes a report and the level of reporting and sends and email
//with the report as an attachment.
function sendResultsViaEmail(report,level) {
  var rows = report.match(/\n/g).length - 1;
  var date = _getDateTime().day;
  
  var subject =  'AdWords Alert: '+ SCRIPT_NAME.join(' ') + ' '+ _initCap(level) + 's Report - ' + day;
  
  var signature = '\n\nThis report was created by an automatic script by Josh DeGraw. If there are any errors or questions about this report, please inform me as soon as possible.';
  var message = emailMessage(rows) + signature;
  var file_name = SCRIPT_NAME.join('_')+date;
  var To;
  var isPreview = '';
  
  if(rows != 0){
    // If it's a preview, only send it to me, and mention that no changes were made
    if(AdWordsApp.getExecutionInfo().isPreview()){ 
      To = EMAILS[0] 
      isPreview = 'Preview; No changes actually made.\n';
    }
    else{
      To = EMAILS.join();
    }
    
    MailApp.sendEmail( {
      to: To,
      subject: subject,
      body: isPreview + message,
      attachments: [Utilities.newBlob(report, 'text/csv', file_name + date+'.csv')] 
    });
    
    Logger.log('Email sent to: '+ To);
    
  }
}

function EmailResults() {
    var Subject = 'AdWords Alert: ' + REPORT_NAME.join(' ');
    var signature = '\n\nThis report was created by an automatic script by Josh DeGraw. If there are any errors or questions about this report, please inform me as soon as possible.';
    var Message = emailMessage() + signature;
    var Attachment = emailAttachment();
    var file_name = _getDateString() + '_' + REPORT_NAME.join('_');
    var To;
    var isPreview = '';


    if (AdWordsApp.getExecutionInfo().isPreview()) {
        To = EMAILS[0]
        isPreview = 'Preview; No changes actually made.\n';
    } else {
        To = EMAILS.join();
    }

    if (Message != '') {
        MailApp.sendEmail({
            to: To,
            subject: Subject,
            body: Message,
            attachments: [{
                fileName: file_name + '.csv',
                mimeType: 'text/csv',
                content: Attachment
            }]
        });

    }
		
    Logger.log('Email sent to: '+ To);
}

function EmailResults(ReportName) {
    var Subject = 'AdWords Alert: ' + ReportName.join(' ');
    var signature = '\n\nThis report was created by an automatic script by Josh DeGraw. If there are any errors or questions about this report, please inform me as soon as possible.';
    var Message = emailMessage() + signature;
    var Attachment = emailAttachment();
    var file_name = _getDateString() + '_' + ReportName.join('_');
    var To;
    var isPreview = '';


    if (AdWordsApp.getExecutionInfo().isPreview()) {
        To = EMAILS[0]
        isPreview = 'Preview; No changes actually made.\n';
    } else {
        To = EMAILS.join();
    }

    if (Message != '') {
        MailApp.sendEmail({
            to: To,
            subject: Subject,
            body: Message,
            attachments: [{
                fileName: file_name + '.csv',
                mimeType: 'text/csv',
                content: Attachment
            }]
        });

    }
		
    Logger.log('Email sent to: '+ To);
}
function info(msg){ Logger.log(msg);}

function print(msg){Logger.log(msg);}

function warn(msg) {Logger.log('WARNING: ' + msg);}

// Returns bool representing if obj is a number
function isNumber(obj){
	return ((obj.toString().match(/(\.*([0-9])*\,*[0-9]\.*)/g)) || (obj === NaN));
}

// returns bool representing if an entity has a given keyword
function hasLabelAlready(entity, label) {
    return (entity.labels().withCondition("Name = '" + label + "'").get().hasNext());
}

//Minified:
function _getDateTime(){var a=new Date,b=AdWordsApp.currentAccount().getTimeZone(),c="MM-dd-yyyy",d=Utilities.formatDate(a,b,c),e=AM_PM(a),f={day:d,time:e};return f}function AM_PM(a){var b=a.getHours(),c=a.getMinutes(),d=b>=12?"pm":"am";b%=12,b=b?b:12,c=c<10?"0"+c:c;var e=b+":"+c+" "+d;return e}function CustomDateRange(a,b){null!==a&&void 0!==a||(a=91),void 0!==b&&""!==b&&null!==b||(b="YYYYMMdd");var c=_daysAgo(a,b).toString(),d=_today(b).toString(),e=_today(),f=_daysAgo(a),g={fromStr:c,toStr:d,fromObj:f,toObj:e,string:function(){return c+","+d}};return g}function _daysAgo(a,b){var c=new Date;c.setDate(c.getDate()-a);var d;if(void 0!=b&&""!=b&&null!=b){var e=AdWordsApp.currentAccount().getTimeZone();d=Utilities.formatDate(c,e,b)}else d={day:c.getDate(),month:c.getMonth(),year:c.getYear()};return d}function _today(a){var d,b=new Date,c=AdWordsApp.currentAccount().getTimeZone();return d=void 0!=a&&""!=a&&null!=a?Utilities.formatDate(b,c,a):{day:b.getDate(),month:b.getMonth(),year:b.getYear()}}function _getDateString(){var a=new Date,b=AdWordsApp.currentAccount().getTimeZone(),c="MM-dd-yyyy",d=Utilities.formatDate(a,b,c);return d}function todayIsMonday(){var a=36e5,b=new Date,c=new Date(b.getTime()+a),e=(c.getTime(),c.getDay());return Logger.log("today: "+c+"\nday: "+e),1===e}function Rolling13Week(){var a="MM/dd/YYYY",b=_daysAgo(98,a)+" - "+_daysAgo(7,a),c=_daysAgo(91,a)+" - "+_today(a),d={from:b,to:c,string:function(){return this.p+" - "+this.n}};return d}function Rolling13Week(a){var b=_daysAgo(98,a)+" - "+_daysAgo(7,a),c=_daysAgo(91,a)+" - "+_today(a),d={from:b,to:c,string:function(){return this.p+" - "+this.n}};return d}function formatKeyword(a){return a=a.replace(/[^a-zA-Z0-9 ]/g,"")}function round(a){var b=Math.pow(10,DECIMAL_PLACES);return Math.round(a*b)/b}function getStandardDev(a,b,c){var d=0;for(var e in a)d+=Math.pow(a[e].stats[c]-b,2);return 0==Math.sqrt(a.length-1)?0:round(Math.sqrt(d)/Math.sqrt(a.length-1))}function getMean(a,b){var c=0;for(var d in a)c+=a[d].stats[b];return 0==a.length?0:round(c/a.length)}function createLabelIfNeeded(a){AdWordsApp.labels().withCondition("Name = '"+a+"'").get().hasNext()||AdWordsApp.createLabel(a)}function sendResultsViaEmail(a,b){var i,c=a.match(/\n/g).length-1,d=_getDateTime().day,e="AdWords Alert: "+SCRIPT_NAME.join(" ")+" "+_initCap(b)+"s Report - "+day,f="\n\nThis report was created by an automatic script by Josh DeGraw. If there are any errors or questions about this report, please inform me as soon as possible.",g=emailMessage(c)+f,h=SCRIPT_NAME.join("_")+d,j="";0!=c&&(AdWordsApp.getExecutionInfo().isPreview()?(i=EMAILS[0],j="Preview; No changes actually made.\n"):i=EMAILS.join(),MailApp.sendEmail({to:i,subject:e,body:j+g,attachments:[Utilities.newBlob(a,"text/csv",h+d+".csv")]}),Logger.log("Email sent to: "+i))}function EmailResults(){var f,a="AdWords Alert: "+REPORT_NAME.join(" "),b="\n\nThis report was created by an automatic script by Josh DeGraw. If there are any errors or questions about this report, please inform me as soon as possible.",c=emailMessage()+b,d=emailAttachment(),e=_getDateString()+"_"+REPORT_NAME.join("_"),g="";AdWordsApp.getExecutionInfo().isPreview()?(f=EMAILS[0],g="Preview; No changes actually made.\n"):f=EMAILS.join(),""!=c&&MailApp.sendEmail({to:f,subject:a,body:c,attachments:[{fileName:e+".csv",mimeType:"text/csv",content:d}]}),Logger.log("Email sent to: "+f)}function EmailResults(a){var g,b="AdWords Alert: "+a.join(" "),c="\n\nThis report was created by an automatic script by Josh DeGraw. If there are any errors or questions about this report, please inform me as soon as possible.",d=emailMessage()+c,e=emailAttachment(),f=_getDateString()+"_"+a.join("_"),h="";AdWordsApp.getExecutionInfo().isPreview()?(g=EMAILS[0],h="Preview; No changes actually made.\n"):g=EMAILS.join(),""!=d&&MailApp.sendEmail({to:g,subject:b,body:d,attachments:[{fileName:f+".csv",mimeType:"text/csv",content:e}]}),Logger.log("Email sent to: "+g)}function info(a){Logger.log(a)}function print(a){Logger.log(a)}function warn(a){Logger.log("WARNING: "+a)}function isNumber(a){return a.toString().match(/(\.*([0-9])*\,*[0-9]\.*)/g)||NaN===a}function hasLabelAlready(a,b){return a.labels().withCondition("Name = '"+b+"'").get().hasNext()}

