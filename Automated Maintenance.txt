var EMAIL_ADDRESS = 'joshd@sewelldirect.com';

//info for the sheet that will hold the Conversion Values
var CONV_SPREADSHEET_URL = 'https://docs.google.com/spreadsheets/d/1-dyzDaFZ8mQvHGidP6MP1P-EXNVFRzJyTxbyi4sHnFg/edit?usp=sharing';
var CONV_SHEET_NAME = 'CONV_VALUE_REPORT';

// Info for the sheet that holds the Max GPs
var GP_SPREADSHEET_URL = 'https://docs.google.com/spreadsheets/d/1oQGfRa2YjB1SeJF5-ZI_H2ewe97eQTtPIUdk0c1tr0I/edit?usp=sharing';
var GP_SHEET_NAME = 'MaxGPs';

var DECIMAL_PLACES = 2;
var TIME_PERIOD = "LAST_14_DAYS";
var CONV_TIME_PERIOD = "LAST_14_DAYS";

var DEFAULT_VALUE_OF_ONE_CONVERSION= 10;

var DEFAULT_MAX_GP = 10;
var DEFAULT_MAX_BID = .7;

var reducedBids = [['Reduced Bids:'],['\nSKU','Campaign','AdGroup','Keyword','MatchType','OldBid','NewBid','Cost','Conversions']];
var reducedNum = 0;
var increasedBids = [['Increased Bids:'],['\nCampaign','AdGroup','Keyword','MatchType','OldBid','NewBid','Cost','Conversions']]
var increasedNum = 0;
var errorNum = 0;
var ERROR_LOG = [['Errors:'],['\nCampaign','AdGroup','Keyword','MatchType']];
var pausedKWs = [['Paused Keywords:'],['\nCampaign','AdGroup','Keyword','MatchType','Bid','Cost']];
var pausedNum = 0;

function main() {
  // Update the spreadsheet,
  //updateConvValReport();
  
  //reduceHighCPCbids();
  //increaseCheapConversions();
  noConversions();
  
  emailResults();
  Logger.log(ERROR_LOG.join());
}

function emailResults() {
  var message  = emailMessage();
  var subject =  'AdWords Alert: Auto-Maintenance- ';
  var message = emailMessage();
  var attachment = emailAttachment();
  
  if (message != '') {
    MailApp.sendEmail( {
      to: EMAIL_ADDRESS,
      subject: subject,
      body: message,
      attachments:[{fileName: _getDateString()+'_Auto_Maintenance.csv', mimeType: 'text/csv', content: attachment}]
    });
  }
}

function emailMessage() {
  var message = "";
  if (reducedNum !=0) {
    message += reducedNum + ' bids auto-reduced.\n';
  }
  if (increasedNum != 0) {
    message += increasedNum + ' bids auto-increased.\n';
  }
  if (pausedNum !=0) {
    message += pausedNum + ' keywords auto-paused.';
  }
  return message;
}

function emailAttachment() {
  var attachment = '';
  if (reducedNum !=0) {    
    attachment += reducedNum + ' ' + reducedBids.join();    
  }
  
  if (increasedNum != 0) {
    if (attachment != ''){ attachment += '\n\n'; }
    attachment += increasedNum + ' ' + increasedBids.join();    
  }
  
  if (pausedNum !=0) {
    if (attachment != ''){ attachment += '\n\n'; }
    attachment += pausedNum + ' ' + pausedKWs.join();    
  }
  
  if (errorNum !=0) {
    if (attachment != ''){ attachment += '\n\n'; }    
    attachment +=  errorNum + ' ' + ERROR_LOG.join();    
  }
  
  return attachment;
}

function type(item) {
  var result = '"';
  var i = 0;
  while (i < item.length) {
    result += '"' +item[i] +'"\n';
    i++;
  }
  return result.join('","') + '"\n';
}

function bidStrategy(bidType) {
  //if( bidType != "TARGET_GP" && bidType != "CONVERSION_OPTIMIZER"){
  if (bidType == "MANUAL_CPC" || bidType == "MANUAL_CPM") {
    return true;
  }
  else {
    return false;
  }
}

function buildSelectorConverted() {
  var kw_iter = AdWordsApp.keywords()
  .forDateRange(TIME_PERIOD)
  .withCondition("Status = ENABLED")
  .withCondition("AdGroupStatus = ENABLED")
  .withCondition("CampaignStatus = ENABLED")
  .withCondition("Conversions > 0")
  .get();
  
  return kw_iter;
  
}
function buildSelectorNoConversions() {
  var kw_iter = AdWordsApp.keywords()
  .forDateRange(TIME_PERIOD)
  .withCondition("Status = ENABLED")
  .withCondition("AdGroupStatus = ENABLED")
  .withCondition("CampaignStatus = ENABLED")
  .withCondition("Conversions = 0")
  .get();
  
  return kw_iter;
  
}


//-----------------------------------
// Reduce Bids on High Cost per Conversion Keywords
//-----------------------------------
function reduceHighCPCbids() {
  info("Reducing CPC bids with high GP.");
  var kw_iter = buildSelectorConverted();
  var alreadyLogged = '';
  var logError;
  
  while (kw_iter.hasNext()){
    
    var kw = kw_iter.next();
    var kw_stats = kw.getStatsFor(TIME_PERIOD);
    var conversions = kw_stats.getConversions();
    var bidType = kw.getCampaign().getBiddingStrategyType();
    
    if (bidStrategy(bidType)) {
      
      
      var matchType = kw.getMatchType();
      var keyW = kw.getText();
      var keyword = formatKeyword(keyW);
      var cost = kw_stats.getCost();
      var adGroup = kw.getAdGroup().getName();
      var campaign = kw.getCampaign().getName();
      logError = 'Error Getting GP for: '+ campaign + ','+ adGroup;
      
      var item = getMaxGP(campaign, adGroup);
      var sku = item.SKU;
      var maxGP = item.GP;
      
      if(maxGP === '#N/A'){
        
        if (alreadyLogged != logError){
          alreadyLogged = logError;
          errorNum++;
          ERROR_LOG = ERROR_LOG.concat('\n'+campaign,adGroup, keyW, matchType);
          //Logger.log('N/A '+ logError + ' '+ sku); 
          
        }
        
        //maxGP = DEFAULT_MAX_GP;
        continue;
      }
      
      //Let's reduce keywords with a GP 5% greater than maxGP by 20%
      var WAY_TOO_HIGH_COST_PER_CONV = maxGP ;
      var WAY_TOO_HIGH_BID_REDUCTION_AMOUNT = .20;
      
      //And keywords with GP between maxGP and maxGP * 1.5 by 10%
      var TOO_HIGH_COST_PER_CONV = maxGP*0.50;
      var TOO_HIGH_BID_REDUCTION_AMOUNT = .10;
      
      if(maxGP != '#N/A'){
        // Logger.log(item.list());
      }
      
      var cost_per_conversion = (cost/(conversions*1.0));
      //Here is the magic.  If it is way too high, reduce it by the way too high amount
      if (cost_per_conversion >= WAY_TOO_HIGH_COST_PER_CONV) {
        var oldBid = kw.getMaxCpc();
        var newBid = oldBid * (1-WAY_TOO_HIGH_BID_REDUCTION_AMOUNT);
        
        kw.setMaxCpc(newBid);
        var message = ['\n' + sku, campaign, adGroup, keyword, matchType, oldBid, round(newBid), cost, conversions];
        
        infoReduced(message);
        reducedNum++;
      }
      //otherwise, if it is still too high, reduce it with just the too high amount
      else if (cost_per_conversion >= TOO_HIGH_COST_PER_CONV) {
        var oldBid = kw.getMaxCpc();
        var newBid = oldBid * (1-TOO_HIGH_BID_REDUCTION_AMOUNT);
        
        kw.setMaxCpc(newBid);
        
        var message =  ['\n' +sku, campaign, adGroup, keyword, matchType, oldBid, round(newBid), cost, conversions];
        
        infoReduced(message);
        reducedNum++;
      }
      
    }
  }
  info("Done Reducing CPC bids with high GP.");
}

//-----------------------------------
// Increase Bids Cheap Conversion Keywords
//-----------------------------------
function increaseCheapConversions() {
  
  info("Increasing bids for cheap conversions.");
  
  var kw_iter = buildSelectorConverted();
  
  while (kw_iter.hasNext()) {
    var kw = kw_iter.next();
    var matchType = kw.getMatchType();
    var keyW = kw.getText();
    var keyword = formatKeyword(keyW);
    var kw_stats = kw.getStatsFor(TIME_PERIOD);
    var cost = kw_stats.getCost();
    var conversions = kw_stats.getConversions();
    var campaign = kw.getCampaign().getName();
    var adGroup = kw.getAdGroup().getName();
    var bidType = kw.getCampaign().getBiddingStrategyType();
    
    var maxGP = getMaxGP(campaign, adGroup);
    
    //For keywords with less than 1/4 maxGP, let's pump those bids up by 35%
    var AMAZING_COST_PER_CONV = maxGP *.25;
    var AMAZING_BID_INCREASE_AMOUNT = .35;
    
    //For keywords with between 1/2 and 1/4 maxGP, we will only increase the bids by 20%
    var GREAT_COST_PER_CONV = maxGP * .75;
    var GREAT_BID_INCREASE_AMOUNT = .20;
    
    
    if (bidStrategy(bidType)) {
      
      if (conversions > 0) {
        var cost_per_conversion = (cost/(conversions*1.0));
        var oldBid = kw.getMaxCpc();
        if (cost_per_conversion <= AMAZING_COST_PER_CONV) {
          var newBid = oldBid * (1+AMAZING_BID_INCREASE_AMOUNT);
          
          kw.setMaxCpc(newBid);
          
          var message =  ['\n' + campaign, adGroup, keyword, matchType, oldBid, round(newBid), cost, conversions];
          
          infoIncreased(message);
          increasedNum++;
        }
        else if (cost_per_conversion <= GREAT_COST_PER_CONV) {
          var newBid = oldBid * (1+ GREAT_BID_INCREASE_AMOUNT);
          
          kw.setMaxCpc(newBid);
          
          var message =  ['\n' + campaign, adGroup, keyword, matchType, oldBid, round(newBid), cost, conversions];
          
          infoIncreased(message);
          increasedNum++;
          
        }
      }
      else
      {
        //no conversions on this keyword
        //noConversions(kw);
      }
    }
    else {
      continue;
    }
  }
  info("Done increasing bids for cheap conversions.");
}

//-----------------------------------
// Pause Keywords That Are Not Performing
//-----------------------------------
function noConversions() {
  
  var DEFAULT_VALUE_OF_ONE_CONVERSION = 10;
  
  var DECREASE_BIDS_BY_PERCENTAGE = .30;
  
  info("Checking nonconverting keyword.");
  var kw_iter = buildSelectorNoConversions();
  
  while (kw_iter.hasNext()) {
    var kw = kw_iter.next();
    var kw_stats = kw.getStatsFor(TIME_PERIOD);
    var matchType = kw.getMatchType();
    
    var matchType = kw.getMatchType();
    var keyW = kw.getText();
    var keyword = formatKeyword(keyW);
    var kw_stats = kw.getStatsFor(CONV_TIME_PERIOD);
    var oldBid = kw.getMaxCpc();
    var campaign = kw.getCampaign().getName();
    var adGroup = kw.getAdGroup().getName();
    var cost = kw_stats.getCost();
    var conversions = kw_stats.getConversions();
    // var convValue = getConvValue(campaign, adGroup, kw);
    //Logger.log('noConversions convValue: '+convValue);
    if(campaign !='Sewell Terms' && campaign != 'Sewell Terms - Remarketing'){
      var maxGP = getMaxGP(campaign, adGroup);
      if (cost > maxGP * 2 ) {
        // var pausedKWs = [['Paused or reduced Keywords:'],['\nCampaign,AdGroup,Keyword,matchType,OldBid,Cost']];
        var message = ['\n' + campaign, adGroup, keyword, matchType, oldBid, cost];
        
        kw.pause();
        infoPaused(message);
        
        pausedNum++;
      }
      else if (cost > maxGP*1.5) {
        var newBid = oldBid *(1-DECREASE_BIDS_BY_PERCENTAGE);
        //  [['Reduced Bids:'],['\nCampaign,AdGroup,Keyword,MatchType,OldBid,NewBid,Cost,Conversions']];
        var message = ['\n' + campaign, adGroup, keyword, matchType, oldBid , round(newBid), cost, conversions];
        
        infoReduced(message);
        
        kw.setMaxCpc(newBid);
        
        reducedNum++;
      }
    }
  }
  info("Done checking nonconverting keyword.");
}

function getConvValue(campaignName, adGroupName, kw) {
  var ss = SpreadsheetApp.openByUrl(CONV_SPREADSHEET_URL);
  var sheet = ss.getSheetByName(CONV_SHEET_NAME);
  //var campaigns = sheet.getLastRow();
  var lastRow = sheet.getLastRow();
  var campaignColumn = 'A';
  var adGroupColumn = 'B';
  var kwColumn = 'C';
  var convValColumn = 'D';
  Logger.log('Campaign "'+ campaignName+ '", AdGroup "' + adGroupName+ '", keyword "'+ kw+'", keywordID "' + kw.getId()+'"');
  
  // Find the Campaign
  for (var campaignRow = 1; campaignRow <= lastRow; campaignRow++) {
    var campaignCell = campaignColumn+campaignRow;
    var campaignCellValue = sheet.getRange(campaignCell).getValue().toString();
    if (campaignCellValue === campaignName) {
      
      // Find the Ad Group
      for (var adGrpRow = campaignRow; sheet.getRange(campaignColumn+adGrpRow).getValue().toString() === campaignName; adGrpRow++) 
      {
        var adGrpCell = adGroupColumn+adGrpRow;
        var adGroupCellValue = sheet.getRange(adGrpCell).getValue().toString();
        if (campaignCellValue === campaignName && adGroupCellValue === adGroupName) 
        {                    
          
          // Find the keyword
          for (var kwRow = adGrpRow;  sheet.getRange(adGrpColumn+kwRow).getValue().toString() === adGroupName; kwRow++) 
          {
            var kwCell = kwColumn+adGrpRow;
            var kwCellValue = sheet.getRange(kwCell).getValue().toString();
            if (campaignCellValue === campaignName && adGroupCellValue === adGroupName && kwCellValue === kw.getId()) 
            {              
              var convVal = sheet.getRange(convValColumn+kwRow).getValue().toString();
              Logger.log('In Loop: Campaign "'+ campaignCellValue+ '", AdGroup "' + adGroupCellValue + '", keyword "'+ kw.getId()+ '" has ConvVal of ' + convVal );
              
              return convVal;
            }else {continue;}
          }
        }else {continue;}
      } 
    }
  }
  return DEFAULT_VALUE_OF_ONE_CONVERSION;
  
}

function updateConvValReport() {
  
  var ss = SpreadsheetApp.openByUrl(CONV_SPREADSHEET_URL);
  var sheet = ss.getSheetByName(CONV_SHEET_NAME);
  
  var report = AdWordsApp.report(
    'SELECT CampaignName, AdGroupName, Id, ConversionValue, AverageCpc, BiddingStrategyType ' +
    'FROM  KEYWORDS_PERFORMANCE_REPORT ' +
    'WHERE CampaignStatus = ENABLED AND AdGroupStatus = ENABLED AND Status = ENABLED AND BiddingStrategyType = MANUAL_CPC ' +
    'DURING ' + CONV_TIME_PERIOD
  );
  
  // Two reports since OR operator doesn't exist in AWQL
  var report2 = AdWordsApp.report(
    'SELECT CampaignName, AdGroupName, Id, ConversionValue, AverageCpc, BiddingStrategyType ' +
    'FROM  KEYWORDS_PERFORMANCE_REPORT ' +
    'WHERE CampaignStatus = ENABLED AND AdGroupStatus = ENABLED AND Status = ENABLED AND BiddingStrategyType = ENHANCED_CPC ' +
    'DURING ' +CONV_TIME_PERIOD
  );
  
  
  sheet.clearContents();
  report.exportToSheet(sheet);
  var array = report2.rows();
  while(array.hasNext()){
    var rowTotal = array.next();
    var row = [rowTotal.CampaignName, rowTotal.AdGroupName, rowTotal.Id, rowTotal.ConversionValue, rowTotal.AverageCpc, rowTotal.BiddingStrategyType];
    sheet.appendRow(row); 
  }
  
  var lastRow = sheet.getLastRow();
  var range = sheet.getRange('A2:F' + lastRow);
  
  range.sort([1,2]);
  
}

function getMaxBid(campaign, adGroup, kw){
  var ss = SpreadsheetApp.openByUrl(GP_SPREADSHEET_URL);
  var sheet = ss.getSheetByName(GP_SHEET_NAME);
  
  var lastRow = sheet.getLastRow();
  var campaignColumn = 'A';
  var adGroupColumn = 'B';
  var MaxBid_Column = 'F';
  //Logger.log(lastRow);
  
  // Find the campaign
  for (var row = 1; row <= lastRow; row++) {
    var campaignCell = campaignColumn+row;
    var campaignCellValue = sheet.getRange(campaignCell).getValue().toString();
    
    if (campaignCellValue === campaign) {
      
      //Find the Ad Group
      for (var adGrpRow = row; sheet.getRange(campaignColumn+adGrpRow).getValue().toString() === campaign; adGrpRow++) {
        var adGrpCell = adGroupColumn+adGrpRow;
        var adGroupCellValue = sheet.getRange(adGrpCell).getValue().toString();
        //Logger.log('Cell: '+ adGrpCell + ' and ' +campaignCell +' is: ' + campaignCellValue+ ' ' +adGroupCellValue);
        
        if (campaignCellValue === campaign && adGroupCellValue === adGroup) {
          var maxBid = sheet.getRange(MaxBid_Column+adGrpRow).getValue().toString();
          // Logger.log('In Loop: Campaign "'+ campaignCellValue+ '", AdGroup "' + adGroupCellValue+ '" has GP of ' + GP );
          return maxBid;					
          
          
        }else {continue;}
      } 
    }else {continue;}
  }
  return DEFAULT_MAX_BID;
}

function getMaxGP(campaign, adGroup) {
  // Logger.log('Get Max GP');
  
  var logError = 'Error Getting GP for: '+ campaign + ','+ adGroup;
  var alreadyLogged = '';
  try{
    var ss = SpreadsheetApp.openByUrl(GP_SPREADSHEET_URL);
    var sheet = ss.getSheetByName(GP_SHEET_NAME);
    //var campaigns = sheet.getLastRow();
    var lastRow = sheet.getLastRow();
    
    var sel_camp = ss.getRangeByName('Selected_Campaign');
    var sel_adGroup = ss.getRangeByName('Selected_AdGroup');	
    //Logger.log(sel_camp.getValue()+ ' ' + sel_adGroup.getValue());
    
    sel_camp.setValue(campaign);
    sel_adGroup.setValue(adGroup);
    
    //Logger.log(sel_camp.getValue()+ ' ' + sel_adGroup.getValue());
    
    var GP = ss.getRangeByName('Selected_GP').getValue();
    var price = ss.getRangeByName('Selected_Price').getValue();
    var maxBid = ss.getRangeByName('Selected_MaxBid').getValue();
    var SKU = ss.getRangeByName('Selected_SKU').getValue();
    
    
  }
  catch(e){
    
    errorNum++;
    ERROR_LOG = ERROR_LOG.concat('\n'+campaign,adGroup, keyW, matchType);
    //Logger.log('N/A '+ logError + ' '+ sku); 
    GP =  10;    
  }
  
  var result = {
    GP: GP, 
    price: price, 
    maxBid: maxBid, 
    SKU: SKU,
    list: function(){return 'SKU: '+ this.SKU +', GP: '+ this.GP+', MaxBid: '+ this.maxBid+', Price: '+ this.price;}
  };
  
  //Logger.log('GP: ' + GP);
  return result;   
}



function infoReduced(item) {
  Logger.log('Reduced: ' + item.join());
  reducedBids = reducedBids.concat(item);
}

function infoIncreased(item) {
  Logger.log('Increased' + item.join());
  increasedBids = increasedBids.concat(item);
}

function infoPaused(item) {
  Logger.log('Keyword paused:' + item.join());
  pausedKWs = pausedKWs.concat(item);
}

function info(item) {
  Logger.log(item);	
}

function formatKeyword(keyword) {
  keyword = keyword.replace(/[^a-zA-Z0-9 ]/g,'');
  return keyword;
}

// A helper function to make rounding a little easier
function round(value) {
  var decimals = Math.pow(10,DECIMAL_PLACES);
  return Math.round(value*decimals)/decimals;
}

//Helper function to format todays date
function _getDateString() {
  var date = Utilities.formatDate((new Date()), AdWordsApp.currentAccount().getTimeZone(), "yyyy-MM-dd");
  return date;
  
}
